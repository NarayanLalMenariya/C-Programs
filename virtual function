/*
virtual function : Used to achieve run time polymorphism.

1. virtual function can not be static or friend functio of any other class.
2. virtual keyword should be there with function in base class. In derived class
also virtual keyword can be used but not mandatory.

3. vritual constructor is pissoble but virtual destructor are not possible.


what is need of vritual funtions or run time polymorphism:
-----------------------------

Let say car is a class. Every car have milage, cost, speed, fuel capacity etc.
but differet - different car's BMW , audi, honda have their own milage , cost etc. 
now car have same functionality.

in c++ when we want to achieve this we can do it by declaring a class Car()
which have method Cost(), Milage(), Speed(), FuelCapacity() with virtual keyword.

and can declare other classes BMW(), AUDI(), Honda() they also implements same method.
and override the base class method. Here binding of function will happen at run time .
depending upon the address pointed by base class pointer with any of the derived class.

*/

1. what happens if Get() method is defined in both base class and derived class.
====================================================================================
#include<iostream>
using namespace std;
class Base
{
public:
    void Get()
    {
        cout << " Base class Get function"  << endl;
    }
};
class Derived: public Base
{
public:

    void Get()
    {
        cout << " Derived class Get function" << endl;
    }

};
int main()
{
    Base bobj;
    Derived dobj;

    bobj.Get();
    dobj.Get();

    return 1;

}

=========================
output:
Base class Get function
Derived class Get function
==========================

-----------------------------------------------------

2. How to access only Derived class Get() function by avoiding use of derived class obj.
=========================================================================================
1. use virtual keyword with base class Get() function 
2. and access Get() method by using base class pointer which consist the address of derived class
object --> known as run time polymorphism. Here Late binding will happen.

#include<iostream>
using namespace std;
class Base
{
public:
    virtual void Get()
    {
        cout << " Base class Get function"  << endl;
    }
};
class Derived: public Base
{
public:

    //virtual void Get() -> its also correct only. but no need to use.
    void Get()
    {
        cout << " Derived class Get function" << endl;
    }

};
int main()
{
    Base *bptr;
    Derived dobj;

    bptr = &dobj;

    bptr->Get();
    return 1;

}

========================
output: Derived class Get function
========================

--------------------------------------------------------------------------------

3. what happens if Set() method is defined in both base class and derived class
but virtual keyword is not present and we are accessing that using base class pointer.
==========================================================================================
--> Here compile time polymorphism will happen so base class Set() method will get called.
--> By default early binding happens in C++. Late binding is achieved with the help of virtual keyword

#include<iostream>
using namespace std;
class Base
{
public:
    virtual void Get()
    {
        cout << " Base class Get function"  << endl;
    }
    void Set()
    {
        cout << " Base class Set function"  << endl;
    }
};
class Derived: public Base
{
public:

    //virtual void Get() -> its also correct only. but no need to use.
    void Get()
    {
        cout << " Derived class Get function" << endl;
    }
    void Set()
    {
        cout << " Derived class Set function"  << endl;
    }

};
int main()
{
    Base *bptr;
    Derived dobj;

    bptr = &dobj;

    //bptr->Get();
    bptr->Set();
    return 1;

}

========================
output: Base class Set function
========================

---------------------------------------------------------------------

4. what happens if print() function is defined in derived class but not in 
base class and we try to access it using base class pointer.
===========================================================================
--> Will give error.

#include<iostream>
using namespace std;
class Base
{
public:
    virtual void Get()
    {
        cout << " Base class Get function"  << endl;
    }
};
class Derived: public Base
{
public:

    //virtual void Get() -> its also correct only. but no need to use.
    void Get()
    {
        cout << " Derived class Get function" << endl;
    }
    void print()
    {
        cout << " Derived class print function" << endl;
    }

};
int main()
{
    Base *bptr;
    Derived dobj;

    bptr = &dobj;

    bptr->print();
    return 1;

}

========================
output:
 Error: class Base has no member function : print()
========================





